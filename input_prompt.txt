I already have a Django project of an ecommerce, but I want to customize functionalities inside the application. I will provide you the project structure and code files of it, you will remember for later customizations.

File ecommerce_project\ecommerce_project\asgi.py:
"""
ASGI config for ecommerce_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ecommerce_project.settings")

application = get_asgi_application()


File ecommerce_project\ecommerce_project\settings.py
"""
Django settings for ecommerce_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_!nbm)+$i%j%e__w0r_67&u%#i-zg!cqt+o@k^f@(i_wa5@kft"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store',  # Add our store app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ecommerce_project.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Make sure this line exists
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.categories',
                'store.context_processors.cart_processor',
            ],
        },
    },
]


WSGI_APPLICATION = "ecommerce_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Authentication settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'  # Redirect to homepage after login
LOGOUT_REDIRECT_URL = 'home'  # Redirect to homepage after logout


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

FIle ecommerce_project\ecommerce_project\urls.py:
"""
URL configuration for ecommerce_project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('store.urls')),
    path('accounts/', include('django.contrib.auth.urls')),  # Django auth URLs
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

File ecommerce_project\ecommerce_project\wsgi.py:
"""
WSGI config for ecommerce_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ecommerce_project.settings")

application = get_wsgi_application()

File ecommerce_project\store\management\commands\populate_db.py:
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from store.models import Category, Product
from django.utils.text import slugify
import random
import os
from django.conf import settings
import shutil
from django.core.files import File

class Command(BaseCommand):
    help = 'Populate database with sample data'

    def handle(self, *args, **options):
        # Create categories
        categories = [
            'Electronics',
            'Clothing',
            'Books',
            'Home & Kitchen',
            'Sports & Outdoors',
        ]
        
        for category_name in categories:
            Category.objects.get_or_create(
                name=category_name,
                slug=slugify(category_name)
            )
            self.stdout.write(self.style.SUCCESS(f'Created category: {category_name}'))
        
        # Create products
        electronics = Category.objects.get(name='Electronics')
        clothing = Category.objects.get(name='Clothing')
        books = Category.objects.get(name='Books')
        home = Category.objects.get(name='Home & Kitchen')
        sports = Category.objects.get(name='Sports & Outdoors')
        
        products = [
            {
                'name': 'Smartphone X',
                'category': electronics,
                'price': 699.99,
                'description': 'Latest smartphone with high-resolution camera and long battery life.',
                'stock': 50
            },
            {
                'name': 'Laptop Pro',
                'category': electronics,
                'price': 1299.99,
                'description': 'Powerful laptop for professionals with high-end specifications.',
                'stock': 25
            },
            {
                'name': 'Wireless Headphones',
                'category': electronics,
                'price': 149.99,
                'description': 'Noise-cancelling wireless headphones with premium sound quality.',
                'stock': 100
            },
            {
                'name': 'Men\'s T-Shirt',
                'category': clothing,
                'price': 24.99,
                'description': 'Comfortable cotton t-shirt available in multiple colors.',
                'stock': 200
            },
            {
                'name': 'Women\'s Jeans',
                'category': clothing,
                'price': 49.99,
                'description': 'Stylish and durable jeans for everyday wear.',
                'stock': 150
            },
            {
                'name': 'Python Programming',
                'category': books,
                'price': 39.99,
                'description': 'Comprehensive guide to Python programming for beginners and advanced users.',
                'stock': 75
            },
            {
                'name': 'Cooking Essentials',
                'category': books,
                'price': 29.99,
                'description': 'Learn the essential cooking techniques and recipes.',
                'stock': 60
            },
            {
                'name': 'Coffee Maker',
                'category': home,
                'price': 89.99,
                'description': 'Automatic coffee maker with timer and multiple brewing options.',
                'stock': 40
            },
            {
                'name': 'Blender',
                'category': home,
                'price': 69.99,
                'description': 'High-powered blender for smoothies, soups, and more.',
                'stock': 35
            },
            {
                'name': 'Yoga Mat',
                'category': sports,
                'price': 29.99,
                'description': 'Non-slip yoga mat for comfortable workouts.',
                'stock': 120
            },
            {
                'name': 'Dumbbell Set',
                'category': sports,
                'price': 119.99,
                'description': 'Adjustable dumbbell set for home workouts.',
                'stock': 25
            },
            {
                'name': 'Smart Watch',
                'category': electronics,
                'price': 249.99,
                'description': 'Track your fitness, receive notifications, and more with this smart watch.',
                'stock': 60
            },
            {
                'name': 'Winter Jacket',
                'category': clothing,
                'price': 129.99,
                'description': 'Warm and water-resistant jacket for cold weather.',
                'stock': 80
            },
            {
                'name': 'Data Science Handbook',
                'category': books,
                'price': 45.99,
                'description': 'Comprehensive guide to data science techniques and tools.',
                'stock': 40
            },
            {
                'name': 'Air Fryer',
                'category': home,
                'price': 99.99,
                'description': 'Cook healthier meals with little to no oil.',
                'stock': 30
            },
            {
                'name': 'Tennis Racket',
                'category': sports,
                'price': 89.99,
                'description': 'Professional-grade tennis racket for all skill levels.',
                'stock': 45
            },
        ]
        
        # Create sample product images directory if it doesn't exist
        sample_images_dir = os.path.join(settings.BASE_DIR, 'sample_images')
        os.makedirs(sample_images_dir, exist_ok=True)
        
        # Create placeholder images for products
        for i, product_data in enumerate(products):
            product_name = product_data['name']
            slug = slugify(product_name)
            
            # Check if product already exists
            if Product.objects.filter(slug=slug).exists():
                self.stdout.write(self.style.WARNING(f'Product already exists: {product_name}'))
                continue
            
            # Create a placeholder image
            image_path = os.path.join(sample_images_dir, f'product_{i+1}.jpg')
            
            # Create a simple colored image using PIL
            try:
                from PIL import Image, ImageDraw
                
                # Create a colored rectangle with product name
                img = Image.new('RGB', (800, 600), color=(random.randint(100, 255), 
                                                          random.randint(100, 255), 
                                                          random.randint(100, 255)))
                d = ImageDraw.Draw(img)
                d.text((400, 300), product_name, fill=(255, 255, 255))
                img.save(image_path)
                
                # Create the product with the image
                product = Product.objects.create(
                    name=product_name,
                    slug=slug,
                    category=product_data['category'],
                    price=product_data['price'],
                    description=product_data['description'],
                    stock=product_data['stock'],
                    available=True
                )
                
                # Add the image to the product
                with open(image_path, 'rb') as img_file:
                    product.image.save(f'{slug}.jpg', File(img_file), save=True)
                
                self.stdout.write(self.style.SUCCESS(f'Created product: {product_name}'))
            
            except ImportError:
                self.stdout.write(self.style.WARNING('PIL not installed. Skipping image creation.'))
                
                # Create the product without an image
                product = Product.objects.create(
                    name=product_name,
                    slug=slug,
                    category=product_data['category'],
                    price=product_data['price'],
                    description=product_data['description'],
                    stock=product_data['stock'],
                    available=True
                )
                
                self.stdout.write(self.style.SUCCESS(f'Created product (no image): {product_name}'))
        
        # Create a test user
        if not User.objects.filter(username='testuser').exists():
            User.objects.create_user(
                username='testuser',
                email='test@example.com',
                password='testpassword123',
                first_name='Test',
                last_name='User'
            )
            self.stdout.write(self.style.SUCCESS('Created test user: testuser / testpassword123'))
        
        # Clean up
        if os.path.exists(sample_images_dir):
            shutil.rmtree(sample_images_dir)
        
        self.stdout.write(self.style.SUCCESS('Database populated successfully!'))

File ecommerce_project\store\templatetags\store_tags.py:
from django import template
from django.utils.safestring import mark_safe

register = template.Library()

@register.simple_tag
def query_transform(request, **kwargs):
    """
    Returns the URL-encoded query string for the current page,
    updating the params with the key/value pairs from the kwargs dict.
    """
    updated = request.GET.copy()
    for key, value in kwargs.items():
        if value is not None:
            updated[key] = value
        else:
            updated.pop(key, None)
    
    return updated.urlencode()

@register.filter
def star_rating(value):
    """
    Convert a numeric rating to star icons.
    """
    full_stars = int(value)
    half_star = value - full_stars >= 0.5
    empty_stars = 5 - full_stars - (1 if half_star else 0)
    
    stars = '<i class="fas fa-star text-warning"></i>' * full_stars
    if half_star:
        stars += '<i class="fas fa-star-half-alt text-warning"></i>'
    stars += '<i class="far fa-star text-warning"></i>' * empty_stars
    
    return mark_safe(stars)

File ecommerce_project\store\admin.py:
from django.contrib import admin
from .models import Category, Product, Comment, Cart, CartItem

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'slug']
    prepopulated_fields = {'slug': ('name',)}

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'price', 'stock', 'available', 'created_at']
    list_filter = ['available', 'created_at', 'category']
    list_editable = ['price', 'stock', 'available']
    prepopulated_fields = {'slug': ('name',)}
    search_fields = ['name', 'description']

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ['user', 'product', 'created_at']
    list_filter = ['created_at']
    search_fields = ['text', 'user__username', 'product__name']

class CartItemInline(admin.TabularInline):
    model = CartItem
    raw_id_fields = ['product']
    extra = 0

@admin.register(Cart)
class CartAdmin(admin.ModelAdmin):
    list_display = ['id', 'user', 'session_id', 'created_at', 'item_count', 'total_price']
    list_filter = ['created_at']
    inlines = [CartItemInline]
    
    def item_count(self, obj):
        return obj.items.count()
    
    def total_price(self, obj):
        return f"${obj.total_price}"

FIle ecommerce_project\store\apps.py:
from django.apps import AppConfig


class StoreConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "store"

File ecommerce_project\store\context_processors.py:
from .models import Category, Cart

def categories(request):
    return {'categories': Category.objects.all()}

def cart_processor(request):
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
        return {'cart': cart}
    elif request.session.session_key:
        cart, created = Cart.objects.get_or_create(session_id=request.session.session_key)
        return {'cart': cart}
    return {'cart': None}

File ecommerce_project\store\forms.py:
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from .models import Comment

class CommentForm(forms.ModelForm):
    text = forms.CharField(
        widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        label='Your Comment'
    )
    
    class Meta:
        model = Comment
        fields = ['text']

class RegisterForm(UserCreationForm):
    email = forms.EmailField(
        max_length=254,
        required=True,
        widget=forms.EmailInput(attrs={'class': 'form-control'})
    )
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Add Bootstrap classes to form fields
        for field_name in self.fields:
            self.fields[field_name].widget.attrs['class'] = 'form-control'

File ecommerce_project\store\models.py:
from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils.text import slugify

class Category(models.Model):
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True)
    
    class Meta:
        verbose_name_plural = 'Categories'
    
    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return reverse('category_detail', args=[self.slug])
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

class Product(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    image = models.ImageField(upload_to='products/')
    stock = models.IntegerField(default=0)
    available = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return reverse('product_detail', args=[self.slug])
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

class Comment(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f'Comment by {self.user.username} on {self.product.name}'

class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    session_id = models.CharField(max_length=100, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"Cart {self.id}"
    
    @property
    def total_price(self):
        return sum(item.total_price for item in self.items.all())
    
    @property
    def total_items(self):
        return sum(item.quantity for item in self.items.all())

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    
    def __str__(self):
        return f"{self.quantity} x {self.product.name}"
    
    @property
    def total_price(self):
        return self.product.price * self.quantity

File ecommerce_project\store\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('products/', views.product_list, name='product_list'),
    path('product/<slug:slug>/', views.product_detail, name='product_detail'),
    path('category/<slug:slug>/', views.category_detail, name='category_detail'),
    path('add-comment/<int:product_id>/', views.add_comment, name='add_comment'),
    path('register/', views.register, name='register'),
    path('cart/', views.cart_detail, name='cart_detail'),
    path('add-to-cart/<int:product_id>/', views.add_to_cart, name='add_to_cart'),
    path('update-cart/<int:item_id>/', views.update_cart, name='update_cart'),
    path('remove-from-cart/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),
]

File ecommerce_project\store\views_auth.py:
from django.shortcuts import render, redirect
from django.contrib.auth import login
from django.contrib import messages
from .forms import UserRegistrationForm

def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "Registration successful!")
            return redirect('home')
        else:
            messages.error(request, "Registration failed. Please correct the errors.")
    else: 
        form = UserRegistrationForm()
    
    return render(request, 'registration/register.html', {'form': form})

File ecommerce_project\store\views.py:
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Q
from django.core.paginator import Paginator
from django.http import HttpResponseRedirect
from django.urls import reverse
from .models import Category, Product, Comment, Cart, CartItem
from .forms import CommentForm, RegisterForm

def home(request):
    featured_products = Product.objects.filter(available=True).order_by('-created_at')[:8]
    return render(request, 'store/home.html', {
        'featured_products': featured_products,
    })

def product_list(request):
    products = Product.objects.filter(available=True)
    
    # Search functionality
    search_query = request.GET.get('search', '')
    if search_query:
        products = products.filter(
            Q(name__icontains=search_query) | 
            Q(description__icontains=search_query)
        )
    
    # Category filter
    category_slug = request.GET.get('category', '')
    if category_slug:
        products = products.filter(category__slug=category_slug)
    
    # Sorting
    sort_option = request.GET.get('sort', '')
    if sort_option == 'price_asc':
        products = products.order_by('price')
    elif sort_option == 'price_desc':
        products = products.order_by('-price')
    elif sort_option == 'newest':
        products = products.order_by('-created_at')
    
    # Pagination
    paginator = Paginator(products, 12)  # Show 12 products per page
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, 'store/product_list.html', {
        'products': page_obj,
        'search_query': search_query,
    })

def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug, available=True)
    comments = Comment.objects.filter(product=product).order_by('-created_at')
    comment_form = CommentForm()
    
    return render(request, 'store/product_detail.html', {
        'product': product,
        'comments': comments,
        'comment_form': comment_form,
    })

def category_detail(request, slug):
    category = get_object_or_404(Category, slug=slug)
    products = Product.objects.filter(category=category, available=True)
    
    return render(request, 'store/category_detail.html', {
        'category': category,
        'products': products,
    })

@login_required
def add_comment(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.product = product
            comment.user = request.user
            comment.save()
            messages.success(request, 'Your comment has been added successfully.')
        else:
            messages.error(request, 'There was an error with your comment.')
    
    return redirect('product_detail', slug=product.slug)

def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Your account has been created! You can now log in.')
            return redirect('login')
    else:
        form = RegisterForm()
    
    return render(request, 'registration/register.html', {'form': form})

def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    
    # Get or create cart
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
    else:
        # Ensure session exists
        if not request.session.session_key:
            request.session.create()
        cart, created = Cart.objects.get_or_create(session_id=request.session.session_key)
    
    # Get quantity from form or default to 1
    quantity = int(request.POST.get('quantity', 1))
    
    # Check if product is already in cart
    try:
        cart_item = CartItem.objects.get(cart=cart, product=product)
        cart_item.quantity += quantity
        cart_item.save()
        messages.info(request, f'Updated {product.name} quantity in your cart.')
    except CartItem.DoesNotExist:
        CartItem.objects.create(cart=cart, product=product, quantity=quantity)
        messages.success(request, f'Added {product.name} to your cart.')
    
    # Redirect back to the referring page or product detail
    next_url = request.META.get('HTTP_REFERER')
    if next_url:
        return HttpResponseRedirect(next_url)
    return redirect('product_detail', slug=product.slug)

def update_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id)
    
    # Check if user has permission to modify this cart item
    if request.user.is_authenticated and cart_item.cart.user != request.user:
        messages.error(request, "You don't have permission to modify this cart.")
        return redirect('cart_detail')
    
    quantity = int(request.POST.get('quantity', 1))
    if quantity > 0:
        cart_item.quantity = quantity
        cart_item.save()
        messages.info(request, 'Cart updated successfully.')
    else:
        cart_item.delete()
        messages.info(request, 'Item removed from cart.')
    
    return redirect('cart_detail')

def remove_from_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id)
    
    # Check if user has permission to modify this cart item
    if request.user.is_authenticated and cart_item.cart.user != request.user:
        messages.error(request, "You don't have permission to modify this cart.")
        return redirect('cart_detail')
    
    cart_item.delete()
    messages.info(request, 'Item removed from cart.')
    
    return redirect('cart_detail')

def cart_detail(request):
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
    elif request.session.session_key:
        cart, created = Cart.objects.get_or_create(session_id=request.session.session_key)
    else:
        # No cart exists yet
        request.session.create()
        cart, created = Cart.objects.get_or_create(session_id=request.session.session_key)
    
    return render(request, 'store/cart_detail.html', {'cart': cart})

File ecommerce_project\templates\registration\login.html
{% extends 'base.html' %}

{% block title %}Login - E-Shop{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="mb-0">Login</h3>
            </div>
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    
                    {% if form.non_field_errors %}
                        <div class="alert alert-danger">
                            {% for error in form.non_field_errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                    
                    <div class="mb-3">
                        <label for="id_username" class="form-label">Username</label>
                        <input type="text" name="username" id="id_username" class="form-control {% if form.username.errors %}is-invalid{% endif %}" required>
                        {% if form.username.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.username.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <label for="id_password" class="form-label">Password</label>
                        <input type="password" name="password" id="id_password" class="form-control {% if form.password.errors %}is-invalid{% endif %}" required>
                        {% if form.password.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.password.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <input type="hidden" name="next" value="{{ next }}">
                        <button type="submit" class="btn btn-primary">Login</button>
                    </div>
                </form>
                
                <div class="mt-3">
                    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
                    <p><a href="{% url 'password_reset' %}">Forgot your password?</a></p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

File ecommerce_project\templates\registration\register.html:
{% extends 'base.html' %}

{% block title %}Register - E-Shop{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="mb-0">Register</h3>
            </div>
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    
                    {% if form.non_field_errors %}
                        <div class="alert alert-danger">
                            {% for error in form.non_field_errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                    
                    <div class="mb-3">
                        <label for="id_username" class="form-label">Username</label>
                        <input type="text" name="username" id="id_username" class="form-control {% if form.username.errors %}is-invalid{% endif %}" required>
                        {% if form.username.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.username.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <label for="id_email" class="form-label">Email</label>
                        <input type="email" name="email" id="id_email" class="form-control {% if form.email.errors %}is-invalid{% endif %}" required>
                        {% if form.email.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.email.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <label for="id_password1" class="form-label">Password</label>
                        <input type="password" name="password1" id="id_password1" class="form-control {% if form.password1.errors %}is-invalid{% endif %}" required>
                        {% if form.password1.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.password1.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                        <div class="form-text">
                            <ul>
                                <li>Your password can't be too similar to your other personal information.</li>
                                <li>Your password must contain at least 8 characters.</li>
                                <li>Your password can't be a commonly used password.</li>
                                <li>Your password can't be entirely numeric.</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="id_password2" class="form-label">Confirm Password</label>
                        <input type="password" name="password2" id="id_password2" class="form-control {% if form.password2.errors %}is-invalid{% endif %}" required>
                        {% if form.password2.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.password2.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary">Register</button>
                    </div>
                </form>
                
                <div class="mt-3">
                    <p>Already have an account? <a href="{% url 'login' %}">Login here</a></p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

File ecommerce_project\templates\404.html:
{% extends 'base.html' %}

{% block title %}Page Not Found - E-Shop{% endblock %}

{% block content %}
<div class="text-center py-5">
    <h1 class="display-1">404</h1>
    <h2>Page Not Found</h2>
    <p class="lead">Sorry, the page you are looking for does not exist.</p>
    <a href="{% url 'home' %}" class="btn btn-primary mt-3">
        <i class="fas fa-home me-2"></i>Return to Homepage
    </a>
</div>
{% endblock %}

File ecommerce_project\templates\500.html:
{% extends 'base.html' %}

{% block title %}Server Error - E-Shop{% endblock %}

{% block content %}
<div class="text-center py-5">
    <h1 class="display-1">500</h1>
    <h2>Server Error</h2>
    <p class="lead">Sorry, something went wrong on our end. Please try again later.</p>
    <a href="{% url 'home' %}" class="btn btn-primary mt-3">
        <i class="fas fa-home me-2"></i>Return to Homepage
    </a>
</div>
{% endblock %}

File ecommerce_project\templates\base.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}E-Commerce Store{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .navbar-brand {
            font-weight: bold;
        }
        .card-img-top {
            height: 200px;
            object-fit: cover;
        }
        .product-detail-img {
            max-height: 400px;
            object-fit: contain;
        }
        .cart-icon {
            position: relative;
        }
        .cart-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    </style>
    {% block extra_css %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{% url 'home' %}">E-Shop</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'home' %}">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'product_list' %}">Products</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="categoriesDropdown" role="button" data-bs-toggle="dropdown">
                            Categories
                        </a>
                        <ul class="dropdown-menu">
                            {% for category in categories %}
                                <li><a class="dropdown-item" href="{% url 'category_detail' category.slug %}">{{ category.name }}</a></li>
                            {% endfor %}
                        </ul>
                    </li>
                </ul>
                <form class="d-flex me-2" action="{% url 'product_list' %}" method="get">
                    <input class="form-control me-2" type="search" name="search" placeholder="Search products...">
                    <button class="btn btn-outline-light" type="submit">Search</button>
                </form>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link cart-icon" href="{% url 'cart_detail' %}">
                            <i class="fas fa-shopping-cart"></i>
                            {% if request.user.is_authenticated or request.session.session_key %}
                                <span class="cart-badge">{{ cart.total_items|default:"0" }}</span>
                            {% endif %}
                        </a>
                    </li>
                    {% if user.is_authenticated %}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                                {{ user.username }}
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <form method="post" action="{% url 'logout' %}" class="dropdown-item p-0">
                                        {% csrf_token %}
                                        <button type="submit" class="dropdown-item">Logout</button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'login' %}">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'register' %}">Register</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4 mb-5">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endif %}

        {% block content %}{% endblock %}
    </div>

    <footer class="bg-dark text-white py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h5>E-Shop</h5>
                    <p>Your one-stop shop for all your needs.</p>
                </div>
                <div class="col-md-4">
                    <h5>Quick Links</h5>
                    <ul class="list-unstyled">
                        <li><a href="{% url 'home' %}" class="text-white">Home</a></li>
                        <li><a href="{% url 'product_list' %}" class="text-white">Products</a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h5>Contact</h5>
                    <address>
                        <p>123 E-Commerce St.<br>Shopping District, SP 12345</p>
                        <p>Email: info@eshop.com<br>Phone: (123) 456-7890</p>
                    </address>
                </div>
            </div>
            <div class="text-center mt-3">
                <p>&copy; {% now "Y" %} E-Shop. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>

File ecommerce_project\manage.py:
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ecommerce_project.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
